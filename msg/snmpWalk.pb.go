// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: proto/snmpWalk.proto

package msg

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// snmp v2 请求信息
type SnmpV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout          int32  `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`                   // Request timeout (The default is 5sec)
	Retries          int32  `protobuf:"varint,2,opt,name=retries,proto3" json:"retries,omitempty"`                   // Number of retries (The default is `0`)
	SecurityLevel    string `protobuf:"bytes,3,opt,name=securityLevel,proto3" json:"securityLevel,omitempty"`        // Security level (V3 specific)
	Network          string `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`                    // See net.Dial parameter (The default is `udp`)
	Address          string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`                    // See net.Dial parameter IP:PORT
	Community        string `protobuf:"bytes,6,opt,name=community,proto3" json:"community,omitempty"`                // Community (V1 or V2c specific)
	UserName         string `protobuf:"bytes,7,opt,name=userName,proto3" json:"userName,omitempty"`                  // Security name (V3 specific)
	AuthPassword     string `protobuf:"bytes,8,opt,name=authPassword,proto3" json:"authPassword,omitempty"`          // Authentication protocol pass phrase (V3 specific)
	AuthProtocol     string `protobuf:"bytes,9,opt,name=authProtocol,proto3" json:"authProtocol,omitempty"`          // Authentication protocol (V3 specific)
	PrivPassword     string `protobuf:"bytes,10,opt,name=privPassword,proto3" json:"privPassword,omitempty"`         // Privacy protocol pass phrase (V3 specific)
	PrivProtocol     string `protobuf:"bytes,11,opt,name=privProtocol,proto3" json:"privProtocol,omitempty"`         // Privacy protocol (V3 specific)
	SecurityEngineId string `protobuf:"bytes,12,opt,name=securityEngineId,proto3" json:"securityEngineId,omitempty"` // Security engine ID (V3 specific)
	ContextEngineId  string `protobuf:"bytes,13,opt,name=contextEngineId,proto3" json:"contextEngineId,omitempty"`   // Context engine ID (V3 specific)
	ContextName      string `protobuf:"bytes,14,opt,name=contextName,proto3" json:"contextName,omitempty"`           // Context name (V3 specific)
	Version          string `protobuf:"bytes,15,opt,name=version,proto3" json:"version,omitempty"`                   // SNMP version to use
	Oid              string `protobuf:"bytes,16,opt,name=oid,proto3" json:"oid,omitempty"`                           // oid value
}

func (x *SnmpV2Request) Reset() {
	*x = SnmpV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snmpWalk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnmpV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnmpV2Request) ProtoMessage() {}

func (x *SnmpV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snmpWalk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnmpV2Request.ProtoReflect.Descriptor instead.
func (*SnmpV2Request) Descriptor() ([]byte, []int) {
	return file_proto_snmpWalk_proto_rawDescGZIP(), []int{0}
}

func (x *SnmpV2Request) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *SnmpV2Request) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *SnmpV2Request) GetSecurityLevel() string {
	if x != nil {
		return x.SecurityLevel
	}
	return ""
}

func (x *SnmpV2Request) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *SnmpV2Request) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SnmpV2Request) GetCommunity() string {
	if x != nil {
		return x.Community
	}
	return ""
}

func (x *SnmpV2Request) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SnmpV2Request) GetAuthPassword() string {
	if x != nil {
		return x.AuthPassword
	}
	return ""
}

func (x *SnmpV2Request) GetAuthProtocol() string {
	if x != nil {
		return x.AuthProtocol
	}
	return ""
}

func (x *SnmpV2Request) GetPrivPassword() string {
	if x != nil {
		return x.PrivPassword
	}
	return ""
}

func (x *SnmpV2Request) GetPrivProtocol() string {
	if x != nil {
		return x.PrivProtocol
	}
	return ""
}

func (x *SnmpV2Request) GetSecurityEngineId() string {
	if x != nil {
		return x.SecurityEngineId
	}
	return ""
}

func (x *SnmpV2Request) GetContextEngineId() string {
	if x != nil {
		return x.ContextEngineId
	}
	return ""
}

func (x *SnmpV2Request) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

func (x *SnmpV2Request) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SnmpV2Request) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

// 返回值
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid   string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`     // OID值
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // OID值对应的采集信息
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snmpWalk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snmpWalk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_proto_snmpWalk_proto_rawDescGZIP(), []int{1}
}

func (x *Result) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *Result) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// snmp v2 响应信息
type SnmpV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*Result `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *SnmpV2Response) Reset() {
	*x = SnmpV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_snmpWalk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnmpV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnmpV2Response) ProtoMessage() {}

func (x *SnmpV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_snmpWalk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnmpV2Response.ProtoReflect.Descriptor instead.
func (*SnmpV2Response) Descriptor() ([]byte, []int) {
	return file_proto_snmpWalk_proto_rawDescGZIP(), []int{2}
}

func (x *SnmpV2Response) GetResult() []*Result {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_proto_snmpWalk_proto protoreflect.FileDescriptor

var file_proto_snmpWalk_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6e, 0x6d, 0x70, 0x57, 0x61, 0x6c, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x8b, 0x04, 0x0a, 0x0d,
	0x53, 0x6e, 0x6d, 0x70, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x72, 0x69, 0x76, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x0e, 0x53,
	0x6e, 0x6d, 0x70, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x32, 0x47, 0x0a, 0x0d, 0x53, 0x6e, 0x6d, 0x70, 0x56, 0x32, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x6d, 0x70, 0x57, 0x61,
	0x6c, 0x6b, 0x12, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x6e, 0x6d, 0x70, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x6e, 0x6d,
	0x70, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_snmpWalk_proto_rawDescOnce sync.Once
	file_proto_snmpWalk_proto_rawDescData = file_proto_snmpWalk_proto_rawDesc
)

func file_proto_snmpWalk_proto_rawDescGZIP() []byte {
	file_proto_snmpWalk_proto_rawDescOnce.Do(func() {
		file_proto_snmpWalk_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_snmpWalk_proto_rawDescData)
	})
	return file_proto_snmpWalk_proto_rawDescData
}

var file_proto_snmpWalk_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_snmpWalk_proto_goTypes = []interface{}{
	(*SnmpV2Request)(nil),  // 0: msg.SnmpV2Request
	(*Result)(nil),         // 1: msg.Result
	(*SnmpV2Response)(nil), // 2: msg.SnmpV2Response
}
var file_proto_snmpWalk_proto_depIdxs = []int32{
	1, // 0: msg.SnmpV2Response.result:type_name -> msg.Result
	0, // 1: msg.SnmpV2Service.GetSnmpWalk:input_type -> msg.SnmpV2Request
	2, // 2: msg.SnmpV2Service.GetSnmpWalk:output_type -> msg.SnmpV2Response
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_snmpWalk_proto_init() }
func file_proto_snmpWalk_proto_init() {
	if File_proto_snmpWalk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_snmpWalk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnmpV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snmpWalk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_snmpWalk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnmpV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_snmpWalk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_snmpWalk_proto_goTypes,
		DependencyIndexes: file_proto_snmpWalk_proto_depIdxs,
		MessageInfos:      file_proto_snmpWalk_proto_msgTypes,
	}.Build()
	File_proto_snmpWalk_proto = out.File
	file_proto_snmpWalk_proto_rawDesc = nil
	file_proto_snmpWalk_proto_goTypes = nil
	file_proto_snmpWalk_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SnmpV2ServiceClient is the client API for SnmpV2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnmpV2ServiceClient interface {
	GetSnmpWalk(ctx context.Context, in *SnmpV2Request, opts ...grpc.CallOption) (*SnmpV2Response, error)
}

type snmpV2ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnmpV2ServiceClient(cc grpc.ClientConnInterface) SnmpV2ServiceClient {
	return &snmpV2ServiceClient{cc}
}

func (c *snmpV2ServiceClient) GetSnmpWalk(ctx context.Context, in *SnmpV2Request, opts ...grpc.CallOption) (*SnmpV2Response, error) {
	out := new(SnmpV2Response)
	err := c.cc.Invoke(ctx, "/msg.SnmpV2Service/GetSnmpWalk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnmpV2ServiceServer is the server API for SnmpV2Service service.
type SnmpV2ServiceServer interface {
	GetSnmpWalk(context.Context, *SnmpV2Request) (*SnmpV2Response, error)
}

// UnimplementedSnmpV2ServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSnmpV2ServiceServer struct {
}

func (*UnimplementedSnmpV2ServiceServer) GetSnmpWalk(context.Context, *SnmpV2Request) (*SnmpV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnmpWalk not implemented")
}

func RegisterSnmpV2ServiceServer(s *grpc.Server, srv SnmpV2ServiceServer) {
	s.RegisterService(&_SnmpV2Service_serviceDesc, srv)
}

func _SnmpV2Service_GetSnmpWalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnmpV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnmpV2ServiceServer).GetSnmpWalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.SnmpV2Service/GetSnmpWalk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnmpV2ServiceServer).GetSnmpWalk(ctx, req.(*SnmpV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _SnmpV2Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.SnmpV2Service",
	HandlerType: (*SnmpV2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSnmpWalk",
			Handler:    _SnmpV2Service_GetSnmpWalk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/snmpWalk.proto",
}
